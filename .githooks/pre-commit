#!/bin/bash

# Pre-commit hook for FamilyBridge Flutter project
# This hook performs checks before allowing a commit

set -e

echo "🔍 Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}✓${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

# Check if Flutter is installed
if ! command -v flutter &> /dev/null; then
    print_error "Flutter is not installed or not in PATH"
    exit 1
fi

# Check if we're in a Flutter project
if [ ! -f "pubspec.yaml" ]; then
    print_error "Not in a Flutter project directory"
    exit 1
fi

# Get list of staged Dart files
STAGED_DART_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(dart)$' || true)

if [ -z "$STAGED_DART_FILES" ]; then
    print_status "No Dart files staged for commit"
    exit 0
fi

echo "📝 Found staged Dart files:"
echo "$STAGED_DART_FILES"
echo ""

# Check Dart format
echo "🎨 Checking Dart formatting..."
UNFORMATTED_FILES=""

for file in $STAGED_DART_FILES; do
    if [ -f "$file" ]; then
        # Check if file is formatted
        if ! dart format --set-exit-if-changed "$file" &> /dev/null; then
            UNFORMATTED_FILES="$UNFORMATTED_FILES $file"
        fi
    fi
done

if [ ! -z "$UNFORMATTED_FILES" ]; then
    print_error "The following files are not properly formatted:"
    echo "$UNFORMATTED_FILES"
    echo ""
    print_warning "Run 'dart format .' or 'make format' to fix formatting issues"
    
    # Ask if user wants to auto-format
    read -p "Do you want to auto-format these files? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "🎨 Auto-formatting files..."
        dart format $UNFORMATTED_FILES
        
        # Add formatted files back to staging
        git add $UNFORMATTED_FILES
        print_status "Files formatted and re-staged"
    else
        print_error "Commit aborted due to formatting issues"
        exit 1
    fi
else
    print_status "All Dart files are properly formatted"
fi

# Run static analysis
echo ""
echo "🔍 Running static analysis..."
if flutter analyze --no-pub --no-fatal-infos; then
    print_status "Static analysis passed"
else
    print_error "Static analysis failed"
    echo ""
    print_warning "Fix the analysis issues before committing"
    exit 1
fi

# Check for common issues
echo ""
echo "🚫 Checking for common issues..."

# Check for debug prints
DEBUG_PRINTS=$(grep -rn "print(" $STAGED_DART_FILES | grep -v "// ignore: avoid_print" || true)
if [ ! -z "$DEBUG_PRINTS" ]; then
    print_warning "Found debug print statements:"
    echo "$DEBUG_PRINTS"
    echo ""
    print_warning "Consider removing debug prints or adding '// ignore: avoid_print' comment"
fi

# Check for TODO comments
TODO_COMMENTS=$(grep -rn "TODO\|FIXME\|HACK" $STAGED_DART_FILES || true)
if [ ! -z "$TODO_COMMENTS" ]; then
    print_warning "Found TODO/FIXME/HACK comments:"
    echo "$TODO_COMMENTS"
    echo ""
fi

# Check for sensitive information
SENSITIVE_PATTERNS="password|secret|key|token|api_key"
SENSITIVE_FILES=$(grep -rn -i "$SENSITIVE_PATTERNS" $STAGED_DART_FILES | grep -v "// ignore: sensitive_info" || true)
if [ ! -z "$SENSITIVE_FILES" ]; then
    print_error "Potentially sensitive information found:"
    echo "$SENSITIVE_FILES"
    echo ""
    print_error "Remove sensitive information before committing"
    exit 1
fi

# Check for large files (> 1MB)
echo ""
echo "📁 Checking file sizes..."
for file in $STAGED_DART_FILES; do
    if [ -f "$file" ]; then
        file_size=$(wc -c < "$file")
        if [ $file_size -gt 1048576 ]; then # 1MB
            print_warning "Large file detected: $file ($(($file_size / 1024))KB)"
        fi
    fi
done

# Check pubspec.yaml changes
if git diff --cached --name-only | grep -q "pubspec.yaml"; then
    echo ""
    echo "📦 pubspec.yaml changes detected, checking dependencies..."
    
    # Check for pub get
    if ! flutter pub get &> /dev/null; then
        print_error "flutter pub get failed"
        exit 1
    fi
    
    print_status "Dependencies check passed"
fi

# Run quick tests on changed files if test files exist
if [ -d "test" ] && [ "$(ls -A test)" ]; then
    echo ""
    echo "🧪 Running quick tests..."
    
    # Check if there are test files for the changed files
    TEST_FILES=""
    for file in $STAGED_DART_FILES; do
        if [[ $file == lib/* ]]; then
            # Convert lib/path/file.dart to test/path/file_test.dart
            test_file=$(echo "$file" | sed 's|^lib/|test/|' | sed 's|\.dart$|_test.dart|')
            if [ -f "$test_file" ]; then
                TEST_FILES="$TEST_FILES $test_file"
            fi
        fi
    done
    
    if [ ! -z "$TEST_FILES" ]; then
        print_status "Running tests for modified files..."
        if flutter test $TEST_FILES --no-pub; then
            print_status "Tests passed"
        else
            print_error "Tests failed"
            exit 1
        fi
    else
        print_warning "No corresponding test files found for modified files"
    fi
fi

# Generate code if build_runner is configured
if grep -q "build_runner" pubspec.yaml; then
    echo ""
    echo "⚙️ Checking code generation..."
    
    # Check if generated files are up to date
    GENERATED_FILES=$(find lib -name "*.g.dart" -o -name "*.freezed.dart" 2>/dev/null || true)
    if [ ! -z "$GENERATED_FILES" ]; then
        # Run build_runner to check if files need updating
        flutter pub run build_runner build --delete-conflicting-outputs &> /dev/null || {
            print_error "Code generation failed"
            exit 1
        }
        
        # Check if any generated files changed
        if ! git diff --quiet $GENERATED_FILES 2>/dev/null; then
            print_warning "Generated files need updating"
            git add $GENERATED_FILES 2>/dev/null || true
            print_status "Generated files updated and staged"
        fi
    fi
fi

echo ""
print_status "All pre-commit checks passed! 🎉"
echo ""

exit 0