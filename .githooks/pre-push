#!/bin/bash

# Pre-push hook for FamilyBridge Flutter project
# This hook runs comprehensive checks before pushing

set -e

echo "üöÄ Running pre-push checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}‚úì${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}‚ö†${NC} $1"
}

print_error() {
    echo -e "${RED}‚úó${NC} $1"
}

# Check if Flutter is installed
if ! command -v flutter &> /dev/null; then
    print_error "Flutter is not installed or not in PATH"
    exit 1
fi

# Check if we're in a Flutter project
if [ ! -f "pubspec.yaml" ]; then
    print_error "Not in a Flutter project directory"
    exit 1
fi

# Get the remote and branch being pushed to
remote="$1"
url="$2"

# Skip checks if this is a force push with --no-verify
if [ "$3" = "--no-verify" ]; then
    print_warning "Skipping pre-push checks due to --no-verify flag"
    exit 0
fi

# Skip checks for certain branches/tags
current_branch=$(git branch --show-current)
if [[ $current_branch =~ ^(hotfix|emergency)/ ]]; then
    print_warning "Detected $current_branch branch, running minimal checks only"
    
    # Run only critical checks for hotfix branches
    echo "üîç Running critical analysis..."
    if ! flutter analyze --no-pub --fatal-warnings; then
        print_error "Critical analysis issues found"
        exit 1
    fi
    
    print_status "Critical checks passed for $current_branch"
    exit 0
fi

echo "üìä Current branch: $current_branch"
echo "üéØ Pushing to: $remote ($url)"
echo ""

# Run comprehensive static analysis
echo "üîç Running comprehensive static analysis..."
if ! flutter analyze --no-pub; then
    print_error "Static analysis failed"
    exit 1
fi
print_status "Static analysis passed"

# Run all tests
echo ""
echo "üß™ Running full test suite..."
if ! flutter test --no-pub --coverage; then
    print_error "Tests failed"
    print_warning "Fix failing tests before pushing"
    exit 1
fi
print_status "All tests passed"

# Check test coverage if coverage directory exists
if [ -d "coverage" ] && [ -f "coverage/lcov.info" ]; then
    echo ""
    echo "üìä Checking test coverage..."
    
    # Check if genhtml is available for coverage report
    if command -v genhtml &> /dev/null; then
        genhtml coverage/lcov.info -o coverage/html &> /dev/null || true
        
        # Extract coverage percentage (this is a simple approach)
        if command -v lcov &> /dev/null; then
            COVERAGE=$(lcov --summary coverage/lcov.info 2>&1 | grep "lines......" | grep -o '[0-9.]*%' | head -1)
            if [ ! -z "$COVERAGE" ]; then
                echo "üìä Test coverage: $COVERAGE"
                
                # Check if coverage is above minimum threshold (e.g., 80%)
                COVERAGE_NUM=$(echo "$COVERAGE" | sed 's/%//')
                if (( $(echo "$COVERAGE_NUM < 80" | bc -l 2>/dev/null || echo "0") )); then
                    print_warning "Test coverage is below 80% ($COVERAGE)"
                    print_warning "Consider adding more tests"
                else
                    print_status "Good test coverage: $COVERAGE"
                fi
            fi
        fi
    fi
fi

# Check for security vulnerabilities
echo ""
echo "üîê Running security checks..."

# Check for hardcoded secrets
SECRETS_PATTERNS="password\s*=\s*['\"][^'\"]*['\"]|api_key\s*=\s*['\"][^'\"]*['\"]|secret\s*=\s*['\"][^'\"]*['\"]|token\s*=\s*['\"][^'\"]*['\"]"
SECRETS_FOUND=$(git log --oneline -n 10 --grep="$SECRETS_PATTERNS" || true)

if [ ! -z "$SECRETS_FOUND" ]; then
    print_warning "Potential secrets found in recent commits:"
    echo "$SECRETS_FOUND"
    echo ""
fi

# Check for sensitive files
SENSITIVE_FILES=$(find . -name "*.key" -o -name "*.pem" -o -name "*.p12" -o -name "*.keystore" -o -name "*.jks" 2>/dev/null | head -5)
if [ ! -z "$SENSITIVE_FILES" ]; then
    print_error "Sensitive files found in repository:"
    echo "$SENSITIVE_FILES"
    echo ""
    print_error "Remove sensitive files before pushing"
    exit 1
fi

print_status "Security checks passed"

# Check dependencies for known vulnerabilities
echo ""
echo "üì¶ Checking dependencies..."
if ! flutter pub deps &> /dev/null; then
    print_error "Failed to check dependencies"
    exit 1
fi

# Check for outdated dependencies
OUTDATED=$(flutter pub outdated --no-dev-dependencies --json 2>/dev/null | jq -r '.packages[] | select(.current != .latest) | "\(.package): \(.current) -> \(.latest)"' 2>/dev/null || true)
if [ ! -z "$OUTDATED" ]; then
    print_warning "Outdated dependencies found:"
    echo "$OUTDATED"
    echo ""
    print_warning "Consider updating dependencies with 'flutter pub upgrade'"
fi

print_status "Dependencies check completed"

# Build check for different platforms
echo ""
echo "üèóÔ∏è Running build checks..."

# Check Android build
echo "üì± Checking Android build..."
if ! flutter build apk --debug --no-pub &> /dev/null; then
    print_error "Android debug build failed"
    exit 1
fi
print_status "Android build check passed"

# Check iOS build (only on macOS)
if [[ "$OSTYPE" == "darwin"* ]]; then
    echo "üçé Checking iOS build..."
    if ! flutter build ios --debug --no-codesign --no-pub &> /dev/null; then
        print_error "iOS debug build failed"
        exit 1
    fi
    print_status "iOS build check passed"
else
    print_warning "Skipping iOS build check (not on macOS)"
fi

# Check web build
echo "üåê Checking web build..."
flutter config --enable-web &> /dev/null
if ! flutter build web --no-pub &> /dev/null; then
    print_warning "Web build failed (non-critical)"
else
    print_status "Web build check passed"
fi

# Performance checks
echo ""
echo "‚ö° Running performance checks..."

# Check for large assets
LARGE_ASSETS=$(find assets/ -type f -size +1M 2>/dev/null || true)
if [ ! -z "$LARGE_ASSETS" ]; then
    print_warning "Large assets found (>1MB):"
    echo "$LARGE_ASSETS"
    echo ""
    print_warning "Consider optimizing large assets"
fi

# Check for unused assets
if [ -d "assets" ]; then
    ASSET_FILES=$(find assets -type f \( -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.gif" -o -name "*.svg" \) 2>/dev/null)
    UNUSED_ASSETS=""
    
    for asset in $ASSET_FILES; do
        asset_name=$(basename "$asset")
        if ! grep -r "$asset_name" lib/ &> /dev/null; then
            UNUSED_ASSETS="$UNUSED_ASSETS $asset"
        fi
    done
    
    if [ ! -z "$UNUSED_ASSETS" ]; then
        print_warning "Potentially unused assets found:"
        echo "$UNUSED_ASSETS"
        echo ""
        print_warning "Consider removing unused assets to reduce app size"
    fi
fi

print_status "Performance checks completed"

# Git checks
echo ""
echo "üóÇÔ∏è Running Git checks..."

# Check commit message format (for the latest commit)
LATEST_COMMIT_MSG=$(git log -1 --pretty=format:%s)
if ! echo "$LATEST_COMMIT_MSG" | grep -qE "^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .{1,50}"; then
    print_warning "Latest commit message doesn't follow conventional format:"
    echo "  '$LATEST_COMMIT_MSG'"
    echo ""
    print_warning "Consider using conventional commit format: type(scope): description"
fi

# Check for merge commits (if not allowed)
MERGE_COMMITS=$(git log --oneline --merges -n 5)
if [ ! -z "$MERGE_COMMITS" ]; then
    print_warning "Merge commits found in recent history:"
    echo "$MERGE_COMMITS"
    echo ""
fi

# Check branch protection
if [[ $current_branch == "main" || $current_branch == "master" ]]; then
    print_warning "Pushing directly to $current_branch branch"
    print_warning "Consider using feature branches and pull requests"
fi

print_status "Git checks completed"

# Final summary
echo ""
echo "üéâ All pre-push checks passed!"
echo ""
print_status "‚úÖ Static analysis passed"
print_status "‚úÖ All tests passed"
print_status "‚úÖ Security checks passed"
print_status "‚úÖ Build checks passed"
print_status "‚úÖ Performance checks completed"
print_status "‚úÖ Git checks completed"
echo ""
echo "üöÄ Ready to push! Good luck! üçÄ"
echo ""

exit 0